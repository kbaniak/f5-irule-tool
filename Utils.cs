using System;
using System.IO;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Collections.Generic;
using System.Runtime.Serialization.Json;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;

using OfficeOpenXml;
using System.Drawing;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json.Linq;

using Getopt;
using Datadefs;

 namespace CoreiRuleUtils
 {
    public class Utils
    {
        private static bool Debug = false;
        public static bool Trace {
            set { Debug = value; }
            get { return Debug;  }
        }
        public static Stream CopyDebugStream(Stream input)
        {
            Stream output = new MemoryStream();
            byte[] buffer = new byte[32768];
            if (Debug) Console.WriteLine("-- debug start");
            while (true)         
            {         
                int read = input.Read (buffer, 0, buffer.Length);         
                if (read <= 0) break;         
                output.Write (buffer, 0, read);
                if (Debug) { Console.Write(System.Text.ASCIIEncoding.ASCII.GetChars(buffer)); }     
            }
            if (Debug) Console.WriteLine("\n-- debug end");
            output.Flush();
            output.Position = 0;         
            return output;
        }

        public static void CreateDataBook(String fname, Config cfg, String target)
        {
            if (File.Exists(fname)) {
                throw new Exception($"output file alraedy exists: {fname}");
            }
            FileInfo newFile = new FileInfo(fname);
            ExcelPackage pck = new ExcelPackage(newFile);
            var ws = pck.Workbook.Worksheets.Add("Info");
            ws.View.ZoomScale = 90;
            var ns = pck.Workbook.Styles.CreateNamedStyle("fpage");
            ns.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            ns.Style.Fill.BackgroundColor.SetColor(Color.White);
            ns.Style.Font.SetFromFont(new Font("Luicide Console", 11, FontStyle.Regular));
            ns = pck.Workbook.Styles.CreateNamedStyle("H1");
            ns.Style.Font.SetFromFont(new Font("Luicide Console", 16, FontStyle.Bold));

            ns = pck.Workbook.Styles.CreateNamedStyle("H2");
            ns.Style.Font.SetFromFont(new Font("Luicide Console", 12, FontStyle.Bold));
            ns.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            ns.Style.Fill.BackgroundColor.SetColor(Color.Blue);
            ns.Style.Font.Color.SetColor(Color.White);
            
            ns = pck.Workbook.Styles.CreateNamedStyle("H3");
            ns.Style.Font.SetFromFont(new Font("Luicide Console", 11, FontStyle.Regular));
            ns.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            ns.Style.Fill.BackgroundColor.SetColor(Color.Wheat);

            ns = pck.Workbook.Styles.CreateNamedStyle("HEADER");
            ns.Style.Font.SetFromFont(new Font("Luicide Console", 11, FontStyle.Bold));
            ns.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            ns.Style.Fill.BackgroundColor.SetColor(Color.Green);
                                  
            ws.Cells["A:Z"].StyleName = "fpage";
            ws.Cells["C10"].Value = "Databook";
            ws.Cells["C10"].StyleName = "H1";

            var hinfo = cfg.DescribeTarget(target);
            int nr = 12;
            ws.Column(3).Width = 20;
            ws.Column(4).Width = 44;
            ws.Cells[$"C{nr}"].Value = "hostname"; ws.Cells[$"D{nr}"].Value = hinfo.device.hostname; nr++;
            ws.Cells[$"C{nr}"].Value = "mac address"; ws.Cells[$"D{nr}"].Value = hinfo.device.baseMac; nr++;
            ws.Cells[$"C{nr}"].Value = "chassisType"; ws.Cells[$"D{nr}"].Value = hinfo.device.chassisType; nr++;
            ws.Cells[$"C{nr}"].Value = "chassisId"; ws.Cells[$"D{nr}"].Value = hinfo.device.chassisId; nr++;
            ws.Cells[$"C{nr}"].Value = "failoverState"; ws.Cells[$"D{nr}"].Value = hinfo.device.failoverState; nr++;
            ws.Cells[$"C{nr}"].Value = "software"; ws.Cells[$"D{nr}"].Value = $"{hinfo.device.version} {hinfo.device.build} {hinfo.device.edition}"; nr++;
            ws.Cells[$"C{nr}"].Value = "HA Group"; ws.Cells[$"D{nr}"].Value = hinfo.hagroup; nr++;
            
            ws.Cells[$"C{nr+4}"].Value = "(C) 2017 Krystian Baniak, auto generated by .netcore irule-tool";
            ws.Cells[$"C{nr+5}"].Value = DateTime.Now.ToString();


            ws = pck.Workbook.Worksheets.Add("System"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "sys/management-ip");
            nr = dumpRestSection(cfg, ws, nr, "sys/management-route");
            nr = dumpRestSection(cfg, ws, nr, "sys/cluster");
            nr = dumpRestSection(cfg, ws, nr, "sys/provision");
            nr = dumpRestSection(cfg, ws, nr, "sys/folder");
            nr = dumpRestSection(cfg, ws, nr, "sys/snmp");
            nr = dumpRestSection(cfg, ws, nr, "sys/ntp");
            ws = pck.Workbook.Worksheets.Add("Logging"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "sys/syslog");
            nr = dumpRestSection(cfg, ws, nr, "sys/log-config/publisher");
            nr = dumpRestSection(cfg, ws, nr, "sys/log-config/destination/remote-syslog");
            nr = dumpRestSection(cfg, ws, nr, "sys/log-config/destination/remote-high-speed-log");
            nr = dumpRestSection(cfg, ws, nr, "sys/log-config/destination/local-syslog");
            nr = dumpRestSection(cfg, ws, nr, "sys/log-config/filter");
            ws = pck.Workbook.Worksheets.Add("Software"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "sys/software/volume");
            ws = pck.Workbook.Worksheets.Add("DSC"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "cm/device-group");
            nr = dumpRestSection(cfg, ws, nr, "cm/traffic-group");
            nr = dumpRestSection(cfg, ws, nr, "cm/device");
            nr = dumpRestSection(cfg, ws, nr, "cm/trust-domain");
            nr = dumpRestSection(cfg, ws, nr, "sys/ha-group");
            nr = dumpRestSection(cfg, ws, nr, "sys/state-mirroring");
            ws = pck.Workbook.Worksheets.Add("Network"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "net/interface");
            nr = dumpRestSection(cfg, ws, nr, "net/trunk");
            nr = dumpRestSection(cfg, ws, nr, "net/vlan");
            nr = dumpRestSection(cfg, ws, nr, "net/route-domain");
            nr = dumpRestSection(cfg, ws, nr, "net/route");
            ws = pck.Workbook.Worksheets.Add("Listeners"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "ltm/virtual");
            nr = dumpRestSection(cfg, ws, nr, "ltm/virtual-address");
            nr = dumpRestSection(cfg, ws, nr, "ltm/snatpool");
            nr = dumpRestSection(cfg, ws, nr, "ltm/snat");
            nr = dumpRestSection(cfg, ws, nr, "ltm/snat-translation");
            nr = dumpRestSection(cfg, ws, nr, "ltm/nat");
            ws = pck.Workbook.Worksheets.Add("Pools"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "ltm/pool", dumpRestLink, new string[]{ "membersReference" });
            nr = dumpRestSection(cfg, ws, nr, "ltm/node");
            nr = dumpRestTree(cfg, ws, nr, "ltm/monitor");
            ws = pck.Workbook.Worksheets.Add("Profiles"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestTree(cfg, ws, nr, "ltm/profile");
            ws = pck.Workbook.Worksheets.Add("iRules"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "ltm/rule");
            ws = pck.Workbook.Worksheets.Add("Files"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "sys/file/ifile");
            nr = dumpRestSection(cfg, ws, nr, "ltm/ifile");
            nr = dumpRestSection(cfg, ws, nr, "sys/file/data-group");
            ws = pck.Workbook.Worksheets.Add("Certs"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "sys/crypto/cert");
            ws = pck.Workbook.Worksheets.Add("iCall"); ws.View.ZoomScale = 80; ws.DefaultColWidth = 30; nr=1;
            nr = dumpRestSection(cfg, ws, nr, "sys/icall/handler/periodic");
            nr = dumpRestSection(cfg, ws, nr, "sys/icall/handler/perpetual");
            nr = dumpRestSection(cfg, ws, nr, "sys/icall/handler/triggered");
            nr = dumpRestSection(cfg, ws, nr, "sys/icall/istats-trigger");
            nr = dumpRestSection(cfg, ws, nr, "sys/icall/script");
            
            pck.Save();
        }
        
        public static int dumpRestTree(Config cfg, ExcelWorksheet ws, int nr, string section)
        {
            DataContractJsonSerializerSettings settings = new DataContractJsonSerializerSettings { UseSimpleDictionaryFormat = true };
            var serializer = new DataContractJsonSerializer(typeof(GenericAnswer), settings);
            string urn = $"https://{cfg.Host}/mgmt/tm/{section}";
            Stream strm = null;
            var client = new RESTClient(cfg);
            RESTClient.request(client.GetClient(), urn, "GET", "", (v) =>  { strm = v; return true; }).Wait();
            if (strm != null) {
              try {
                JObject resp = JObject.Parse((new StreamReader(strm)).ReadToEnd());
                String pattern = $"https://.+?/{section}/(.+?)\\?.+";
                if (resp["items"] != null) {
                    foreach (JToken tk in resp["items"].Children())
                    {
                        if (tk["reference"]!=null) {
                            Console.WriteLine("  lnk {0}", tk["reference"]["link"]);
                            var ma = Regex.Match(tk["reference"]["link"].ToString(), pattern);
                            if (ma.Success) {
                                Console.WriteLine("++ matches: {0}",ma.Groups[1].Value);
                                nr = dumpRestSection(cfg, ws, nr, $"{section}/{ma.Groups[1].Value}");
                            }

                        }
                    }
                }
                
              } catch (Exception xx) {

              }
            }
            nr++;
            return nr;
        }
        public static RFResult dumpRestLink(Config cfg, string link)
        {
            RFResult rfr = null;
            DataContractJsonSerializerSettings settings = new DataContractJsonSerializerSettings { UseSimpleDictionaryFormat = true };
            var serializer = new DataContractJsonSerializer(typeof(GenericAnswer), settings);
            String pattern = $"https://.+?/mgmt/tm/(.+?)\\?.+";
            var ma = Regex.Match(link,pattern);
            if (ma.Success) {
                Console.WriteLine("  following lnk: {0}", ma.Groups[1].Value); 
                try {
                    rfr = dumpRestRaw(cfg,ma.Groups[1].Value);
                } catch (Exception ex) {
                    Console.WriteLine("- dumpRestLink: problem: {0}", ex.Message);
                }
            }
            return rfr;
        }
        public static RFResult dumpRestRaw(Config cfg, string section, Func<Config,string,RFResult> callback = null, string[] cols=null)
        {
            var rfr = new RFResult();
            DataContractJsonSerializerSettings settings = new DataContractJsonSerializerSettings { UseSimpleDictionaryFormat = true };
            var serializer = new DataContractJsonSerializer(typeof(GenericAnswer), settings);
            string urn = $"https://{cfg.Host}/mgmt/tm/{section}";
            Stream strm = null;
            var client = new RESTClient(cfg);
            RESTClient.request(client.GetClient(), urn, "GET", "", (v) =>  { strm = v; return true; }).Wait();
            if (strm != null) {
              try {
                JObject resp = JObject.Parse((new StreamReader(strm)).ReadToEnd());
                Console.WriteLine("collection: {0}", resp["kind"]);
                var globdict = new List<string>();
                var list = new List<RFRow>();
                var banned = new List<string>();
                banned.Add("selfLink");
                banned.Add("kind");
                banned.Add("fullPath");
                banned.Add("apiAnonymous");
                if (resp["items"] != null) {
                    foreach (JToken tk in resp["items"].Children())
                    {
                       var dict = new Dictionary<string,string>();
                       var references = new Dictionary<string,string>();
                       //Console.WriteLine("  {0}", tk["name"]);
                       foreach (JToken ce in tk.Children()) {
                           if (ce.Type == JTokenType.Property) {
                             JProperty pr = ce.ToObject<JProperty>();
                             //Console.WriteLine("    tp: {3} {0} {1} {2}", ce.Type, pr.Name, pr.Value, pr.Value.HasValues);
                             if (!globdict.Contains(pr.Name)) {
                               if (pr.Name.EndsWith("Reference")) references.Add(pr.Name, pr.Value["link"].ToString()); 
                               if (!banned.Contains(pr.Name) && !pr.Name.EndsWith("Reference") ) globdict.Add(pr.Name);
                             }
                             if (pr.Value.HasValues) {
                               if (pr.Value.Type == JTokenType.Array) {
                                  JArray ja = pr.Value.ToObject<JArray>();
                                  dict.Add(pr.Name, ja.ToString());
                               } else { 
                                  dict.Add(pr.Name, pr.Value.ToString());
                               }
                             } else {
                               if (pr.Value.Type == JTokenType.String) {
                                   dict.Add(pr.Name, (string)pr.Value);
                               } else {
                                   dict.Add(pr.Name, pr.Value.ToString());
                               }
                             }
                           }
                       }
                       var crow = new RFRow(dict);
                       if (cols!=null){
                            foreach (var colref in cols){
                                if (references[colref] != null) {
                                    crow.extra = callback(cfg,references[colref]);
                                }
                            }
                       }
                       list.Add(crow);
                    }
                    rfr.header = globdict;
                    rfr.nodes = list;
                } 
              } catch (Exception ex) {
                    Console.WriteLine("-- dumpRestRaw: {0}", ex.Message);
              }
            }
            return rfr;
        }
        public static int dumpRestSection(Config cfg, ExcelWorksheet ws, int nr, string section, Func<Config,string,RFResult> func = null, string[] cols=null)
        {
            var resp = dumpRestRaw(cfg,section,func,cols);

            int pos = 1;
            ws.Row(nr).StyleName ="H2";
            ws.SetValue(nr,pos,section);
            nr++;
            if (resp.header == null || resp.nodes == null) return nr;
            foreach (string kp in resp.header) {
                ws.Row(nr).StyleName = "HEADER";
                ws.SetValue(nr,pos,kp);
                pos++;
            }
            nr++;
            foreach (var le in resp.nodes){
                pos = 1;
                foreach (string kp in resp.header) {
                    var sve = "--";
                    le.columns.TryGetValue(kp,out sve);
                    ws.SetValue(nr,pos, sve);
                    pos++;
                }
                nr++;
                // now some extra processing
                if (func!=null && le.extra!=null) {
                    pos = 2;
                    ws.Row(nr).OutlineLevel = 1;
                    ws.Row(nr).Collapsed = true;
                    foreach (string rh in le.extra.header) {
                        ws.Row(nr).StyleName = "H3";
                        ws.SetValue(nr,pos,rh);
                        pos++;
                    }
                    nr++;
                    foreach (var ce in le.extra.nodes) {
                        pos=2;
                        ws.Row(nr).OutlineLevel = 1;
                        foreach (string rh in le.extra.header) {
                            var sve = "--";
                            ce.columns.TryGetValue(rh,out sve);
                            ws.SetValue(nr,pos, sve);
                            pos++;    
                        }
                        nr++;
                    }
                }
            }
            return nr;
        }

    }

    public class RESTClient
    {
        private HttpClient client;
        private Config chnd;
        public RESTClient(Config cfg)
        {
            chnd = cfg;
            var handler = new HttpClientHandler();
            handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; };
            client = new HttpClient(handler);
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Add("UserAgent", "iCR Agent 1.0");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(
                "Basic",
                Convert.ToBase64String(
                    System.Text.ASCIIEncoding.ASCII.GetBytes(
                        string.Format("{0}:{1}", cfg.User, cfg.Secret)
                    )
                )
            );
        }

        public HttpClient GetClient()
        {
            return client;
        }

        public iCRresponse<T> getQuery<T>(string qr = null, bool suppress = false)
        {
            var serializer = new DataContractJsonSerializer(typeof(iCRresponse<T>));
            string urn = "https://" + chnd.Host + chnd.Query;
            if (qr != null) {
                urn = "https://" + chnd.Host + qr;
            }
            Stream strm = null;
            request(client, urn, "GET", "", (v) =>  { strm = v; return true; }, suppress).Wait();
            if (strm != null) {
                return serializer.ReadObject(strm) as iCRresponse<T>;
            }
            return null;
        }

        public T postQuery<T>(string post, string qr = null, bool suppress = false) where T : class
        {
            var serializer = new DataContractJsonSerializer(typeof(T));
            string urn = "https://" + chnd.Host + chnd.Query;
            if (qr != null) {
                urn = "https://" + chnd.Host + qr;
            }
            Stream strm = null;
            request(client, urn, "POST", post, (v) =>  { strm = v; return true; }, suppress ).Wait();
            if (strm != null) {
                return serializer.ReadObject(strm) as T;
            }
            return null;
        }

        public T putQuery<T>(string post, string qr = null, bool suppress = false) where T : class
        {
            var serializer = new DataContractJsonSerializer(typeof(T));
            string urn = "https://" + chnd.Host + chnd.Query;
            if (qr != null) {
                urn = "https://" + chnd.Host + qr;
            }
            Stream strm = null;
            request(client, urn, "PUT", post, (v) =>  { strm = v; return true; }, suppress ).Wait();
            if (strm != null) {
                return serializer.ReadObject(strm) as T;
            }
            return null;
        }

        public static async Task request(HttpClient client, string urn, string type, string query, Func<Stream,bool> handler, bool suppress = false)
        {
            try {
                if (type.Equals("GET")) {
                    var sTask = client.GetStreamAsync(urn);
                    var strm = Utils.CopyDebugStream(await sTask);
                    handler(strm);
                }
                if (type.Equals("POST")) {
                    HttpContent content = new StringContent(query, System.Text.Encoding.UTF8, "application/json");
                    HttpResponseMessage sresp = await client.PostAsync(urn, content);
                    var strm = Utils.CopyDebugStream(await sresp.Content.ReadAsStreamAsync());
                    handler(strm);
                }
                if (type.Equals("PUT")) {
                    HttpContent content = new StringContent(query, System.Text.Encoding.UTF8, "application/json");
                    HttpResponseMessage sresp = await client.PutAsync(urn, content);
                    var strm = Utils.CopyDebugStream(await sresp.Content.ReadAsStreamAsync());
                    handler(strm); 
                }
            } catch (Exception ex) {
                if (!suppress) Console.WriteLine("httpRequest: failed to send request: {0}", ex.Message);
                handler(null);
            }
        }
    }

    public class Batch
    {
        private string fileName;
        private BatchDefinition bdef;
        private Config chnd;
        public Batch(string fname, Config cfg)
        {
            chnd = cfg;
            if (File.Exists(fname)) {
                FileStream input = File.OpenRead(fname);
                Console.WriteLine("+ processing batch file: {0}", fname);
                DataContractJsonSerializerSettings settings = new DataContractJsonSerializerSettings { UseSimpleDictionaryFormat = true };
                var serializer = new DataContractJsonSerializer(typeof(BatchDefinition), settings);
                bdef = serializer.ReadObject(input) as BatchDefinition;
                foreach (KeyValuePair<string,string> item in bdef.options)
                {
                    Console.WriteLine("~ batch option: {0} {1}", item.Key, item.Value);
                }
            }
        }
        public void RunStepSet(string sset)
        {
            if (sset.Equals("default")) {
                if (bdef.steps.Count > 0) {
                    foreach (string step in bdef.steps) {
                        Console.WriteLine("--> processing step: {0}", step);
                        ExecuteStep(step);
                    }
                }
            }
        }
        public void ExecuteStep(string step)
        {
            switch (step) {
                case "LOAD_RULES": {
                    upload_iRules();
                    break;
                }
                case "SAVE": {
                    RESTClient cn = new RESTClient(chnd);
                    string post = "{ \"command\": \"save\" }";
                    iCRPostResponse resp = cn.postQuery<iCRPostResponse>(post, "/mgmt/tm/sys/config");
                    Console.WriteLine("RESP: {0}", resp.kind);
                    break;
                }
                case "SYNC": {
                    RESTClient cn = new RESTClient(chnd);
                    string grp = chnd.HAGroup;
                    if (grp != null) {
                        string post = "{ \"command\": \"run\", \"utilCmdArgs\": \"config-sync to-group "+ grp +"\" }";
                        iCRPostResponse resp = cn.postQuery<iCRPostResponse>(post, "/mgmt/tm/cm");
                        Console.WriteLine("RESP: {0}", resp.kind);
                    }
                    break;
                }
                default: {
                    Console.WriteLine(" !not implemented! ");
                    break;
                }
            }
        }
        public async Task upload_iRule(string name)
        {
            var fname = bdef.options["rules_location"] + "/" + name + ".tcl";
            if (File.Exists(fname)) {
                iRuleUpload iu = new iRuleUpload();
                iu.name = name;
                iu.partition = "Common";
                iu.fullPath = "/" + iu.partition + "/" + iu.name;
                using (var reader = File.OpenText(fname)) {
                    iu.apiAnonymous = await reader.ReadToEndAsync();
                }
                var serializer = new DataContractJsonSerializer(typeof(iRuleUpload));
                var stream = new MemoryStream();
                serializer.WriteObject(stream, iu);
                stream.Position = 0;
                //Console.WriteLine("JSON: {0}", await (new StreamReader(stream)).ReadToEndAsync() );
                /* check whether given iRule exists */
                RESTClient cn = new RESTClient(chnd);
                bool isNew = true;
                iCRresponse<iCRitem> irs = cn.getQuery<iCRitem>(
                        "/mgmt/tm/ltm/rule/~" + iu.partition + "~" + iu.name, // + "?\\$select=name,kind,generation"
                        true 
                    );
                if (irs != null && irs.kind != null) { // && irs.items[0].name.Equals(iu.name)) {
                    isNew = false;
                }
                /* Upload iRule */
                if (isNew) {
                    iCRPostResponse resp = cn.postQuery<iCRPostResponse>(
                        await (new StreamReader(stream)).ReadToEndAsync(),
                        "/mgmt/tm/ltm/rule"
                    );
                    if (resp.apiError !=null) {
                        Console.WriteLine("install [FAILED]\n    {0}",resp.message);
                    } else {
                        Console.WriteLine("install [SUCCESS]");
                    }
                } else {
                    iCRPostResponse resp = cn.putQuery<iCRPostResponse>(
                        await (new StreamReader(stream)).ReadToEndAsync(),
                        "/mgmt/tm/ltm/rule/" + iu.name
                    );
                    if (resp.apiError !=null) {
                        Console.WriteLine("update [FAILED]\n    {0}",resp.message);
                    } else {
                        Console.WriteLine("update [SUCCESS]");
                    }
                }
            } else {
                throw new Exception("irule not found: " + fname);
            }
        }
        public void upload_iRules()
        {
            if (bdef.rules.Count < 1) { return; }
            foreach (KeyValuePair<string,BRule> rule in bdef.rules)
            {
                if (rule.Value.priority > 0) {
                  Console.Write("  - uploading priority iRule: {0}\t\t", rule.Key);
                  upload_iRule(rule.Key).Wait();
                }
            }
            foreach (KeyValuePair<string,BRule> rule in bdef.rules)
            {
                if (rule.Value.priority == 0) {
                  Console.Write("  - uploading iRule: {0}\t\t", rule.Key);
                  upload_iRule(rule.Key).Wait();
                }
            }
        }
    }

    public class Config
    {
        private string ohost;
        private string query;
        private string ouser;
        private string opass;
        public bool Debug = false;
        private string bfile;
        public bool bflag = false;
        public string HAGroup = null;
        public Config ()
        {
            ohost = "10.128.1.45";
            query = "/mgmt/tm/ltm/rule";
            ouser = "admin";
            opass = "admin";
        }
        public Batch OpenBatch()
        {
            return new Batch(bfile, this);
        }
        public Target DescribeTarget(String tgt)
        {
            if (!tgt.Equals("")) {
                Console.WriteLine(". connecting to target: {0}", tgt);
                GetHAGroup(new Option('t', true, tgt));
                RESTClient cn = new RESTClient(this);
                iCRresponse<iCRdevice> resp = cn.getQuery<iCRdevice>("/mgmt/tm/cm/device");
                if (resp != null) {
                    foreach (iCRdevice dev in resp.items) {
                        if (dev.selfDevice){ 
                            return new Target(dev, HAGroup);
                        }
                    }
                }
            }
            return null;
        }
        public bool IdentifyTarget(Option opt)
        {
            if (opt != null && opt.opt == 't') {
                Console.WriteLine(". connecting to target: {0}", opt.val);
                GetHAGroup(opt);
                RESTClient cn = new RESTClient(this);
                iCRresponse<iCRdevice> resp = cn.getQuery<iCRdevice>("/mgmt/tm/cm/device");
                if (resp == null) return false;
                foreach (iCRdevice dev in resp.items) {
                    if (dev.selfDevice) {
                        Console.WriteLine("  [name         ] : {0}", dev.hostname);
                        Console.WriteLine("  [software     ] : {0}.{1} {2}", dev.version, dev.build, dev.edition);
                        Console.WriteLine("  [failoverState] : {0}", dev.failoverState);
                        Console.WriteLine("  [mac address  ] : {0}", dev.baseMac);
                        Console.WriteLine("  [management ip] : {0}", dev.managementIp);
                        Console.WriteLine("  [cm group     ] : {0}", HAGroup);
                        return true;
                    }
                }
            }
            return false;
        }

        public void GetHAGroup(Option opt)
        {
            if (opt != null && opt.opt == 't') {
                RESTClient cn = new RESTClient(this);
                iCRresponse<iCRdevicegroup> resp = cn.getQuery<iCRdevicegroup>("/mgmt/tm/cm/device-group");
                if (resp == null) return;
                foreach (iCRdevicegroup dev in resp.items) {
                    if (dev.type.Equals("sync-failover")) {
                        HAGroup = dev.name;
                    }
                }
            }
        }
        public void setBatchMode(string fname)
        {
            bfile = fname;
            bflag = true;
        }
        public string Host
        {
            get { return ohost; }
            set { ohost = value; }
        }
        public string Query 
        { 
            get { return query; }
            set { query = "/mgmt/tm/" + value; } 
        }
        public string User
        {
            get { return ouser; }
            set { ouser = value; }
        }
        public string Secret
        {
            get { return opass; }
            set { opass = value; }
        } 
    }
 
 }